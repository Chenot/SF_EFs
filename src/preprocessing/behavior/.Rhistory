df_final <- read.csv("D:\\Google Drive\\Professionnel\\2_ThÃ¨se\\MANIPS\\Manip3_EEG_microstates\\Demographics.csv", sep = ";")
View(df_final)
df_final <- read.csv("D:\\Google Drive\\Professionnel\\3_Post-doc_ISAE\\RR_MicroStates\\tmp_results\\behavioral\\data_final_clean.csv", sep = ";")
subjects_to_exclude <- paste0("P", sprintf("%03d", c(17, 28, 31, 32, 34, 48, 58, 62, 66, 79, 87, 88, 97, 105, 114, 116, 136, 138, 141, 147)))
# Exclude these subjects from the dataset
df_final <- df_final %>%
filter(!(Participant %in% subjects_to_exclude))
library(ggplot2)
library(cowplot)
library(lme4)
library(nlme)
library(tidyverse)
library(ez)
library(pwr)
library(gghalves)
library(dplyr)
library(bayestestR)
library(ggridges)
library(stargazer)
library(kableExtra)
library(data.table)
library(psych)
library(ggpubr)
library(ggExtra)
library(readxl)
# Exclude these subjects from the dataset
df_final <- df_final %>%
filter(!(Participant %in% subjects_to_exclude))
subjects_to_exclude <- paste0("P", sprintf("%03d", c(17, 28, 31, 32, 34, 48, 58, 62, 66, 79, 87, 88, 97, 105, 114, 116, 136, 138, 141, 147)))
# Exclude these subjects from the dataset
df_final <- df_final %>%
filter(!(Participant %in% subjects_to_exclude))
View(df_final)
df_final <- read.csv("D:\\Google Drive\\Professionnel\\3_Post-doc_ISAE\\RR_MicroStates\\tmp_results\\behavioral\\data_final_clean.csv")
subjects_to_exclude <- paste0("P", sprintf("%03d", c(17, 28, 31, 32, 34, 48, 58, 62, 66, 79, 87, 88, 97, 105, 114, 116, 136, 138, 141, 147)))
df_final <- df_final %>%
filter(!(Participant %in% subjects_to_exclude))
View(df_final)
ms <- read.csv("D:\Google Drive\Professionnel\3_Post-doc_ISAE\RR_MicroStates\Code\Code_Caro\EEGMicrostates-main\Project_07-Jun-2023\Microstates_Results\stats\csv\stats_group_backfit_4MS.csv")
ms <- read.csv("D:\\Google Drive\\Professionnel\\3_Post-doc_ISAE\\RR_MicroStates\\Code\\Code_Caro\\EEGMicrostates-main\\Project_07-Jun-2023\\Microstates_Results\\stats\\csv\\stats_group_backfit_4MS.csv")
View(ms)
names(ms)[names(ms) == 'subject'] <- 'Participant'
View(ms)
df_final <- read.csv("D:\\Google Drive\\Professionnel\\3_Post-doc_ISAE\\RR_MicroStates\\tmp_results\\behavioral\\data_final_clean.csv")
View(ms)
View(df_final)
ms$Participant <- gsub("sub-", "", ms$Participant)
View(ms)
names(ms)[names(ms) == 'subjectID'] <- 'Participant'
ms$Participant <- gsub("sub-", "", ms$Participant)
View(ms)
View(df_final)
df_final <- merge(df_final, ms, by ="Participant", all = TRUE)
View(df_final)
subjects_to_exclude <- paste0("P", sprintf("%03d", c(17, 28, 31, 32, 34, 48, 58, 62, 66, 79, 87, 88, 97, 105, 114, 116, 136, 138, 141, 147)))
# Exclude these subjects from the dataset
df_final <- df_final %>%
filter(!(Participant %in% subjects_to_exclude))
# Compute the z-score
df_final <- df_final %>%
mutate(zscore_antisaccade = as.vector(scale(-antisaccade)),
zscore_categoryswitch = as.vector(scale(-categoryswitch)),
zscore_colorshape = as.vector(scale(-colorshape)),
zscore_dualnback = as.vector(scale(dualnback)),
zscore_keeptrack = as.vector(scale(keeptrack)),
zscore_lettermemory = as.vector(scale(lettermemory)),
zscore_stopsignal = as.vector(scale(-stopsignal)),
zscore_stroop = as.vector(scale(-stroop)),
zscore_numberletter = as.vector(scale(-numberletter)))
# Replace SD values < -3SD with -3SD
df_final <- df_final %>%
mutate(across(starts_with("zscore_"), ~ifelse(.x < -3, -3, .x)))
a <- ggdensity(df_final$duration3,
main = "Density plot of microstate C",
xlab = "Duration",
add = "mean", rug = TRUE)
## Density microstates
a <- ggdensity(df_final$duration3,
main = "Density plot of microstate C",
xlab = "Duration",
add = "mean", rug = TRUE)
b <- ggdensity(df_final$duration4,
main = "Density plot of microstate D",
xlab = "Duration",
add = "mean", rug = TRUE)
c <- ggdensity(df_final$occurence3,
main = "Density plot of microstate C",
xlab = "Occurence",
add = "mean", rug = TRUE)
d <- ggdensity(df_final$occurence4,
main = "Density plot of microstate D",
xlab = "Occurence",
add = "mean", rug = TRUE)
e <- ggdensity(df_final$coverage3,
main = "Density plot of microstate C",
xlab = "Coverage",
add = "mean", rug = TRUE)
f <- ggdensity(df_final$coverage4,
main = "Density plot of microstate D",
xlab = "Coverage",
add = "mean", rug = TRUE)
plot_grid(a,b,c,d,e,f, ncol = 2, nrow = 3)
########## Global EFs score
# Occurence Microstate 1
a <- ggplot(df_final, aes(x=zscore_EF, y=occurence1))+
geom_point()+stat_cor()+
ylab("Occurence")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate A") +
theme(plot.title = element_text(hjust = 0.1))
# Occurence Microstate 2
b <- ggplot(df_final, aes(x=zscore_EF, y=occurence2))+
geom_point()+stat_cor()+
ylab("Occurence")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate B") +
theme(plot.title = element_text(hjust = 0.1))
# Occurence Microstate 3
c <- ggplot(df_final, aes(x=zscore_EF, y=occurence3))+
geom_point()+stat_cor()+
ylab("Occurence")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate C") +
theme(plot.title = element_text(hjust = 0.1))
# Occurence Microstate 4
d <- ggplot(df_final, aes(x=zscore_EF, y=occurence4))+
geom_point()+stat_cor()+
ylab("Occurence")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate D") +
theme(plot.title = element_text(hjust = 0.1))
# meanduration Microstate 1
e <- ggplot(df_final, aes(x=zscore_EF, y=duration1))+
geom_point()+stat_cor()+
ylab("Mean Duration")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate A") +
theme(plot.title = element_text(hjust = 0.1))
# meanduration Microstate 2
f <- ggplot(df_final, aes(x=zscore_EF, y=duration2))+
geom_point()+stat_cor()+
ylab("Mean Duration")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate B") +
theme(plot.title = element_text(hjust = 0.1))
# meanduration Microstate 3
g <- ggplot(df_final, aes(x=zscore_EF, y=duration3))+
geom_point()+stat_cor()+
ylab("Mean Duration")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate C") +
theme(plot.title = element_text(hjust = 0.1))
# meanduration Microstate 4
h <- ggplot(df_final, aes(x=zscore_EF, y=duration4))+
geom_point()+stat_cor()+
ylab("Mean Duration")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate D") +
theme(plot.title = element_text(hjust = 0.1))
plot_grid(c,d,g,h, ncol = 2, nrow = 2) # Hypotheses
df_final$zscore_inhibition <- rowMeans(subset(df_final, select = c(zscore_stroop, zscore_stopsignal, zscore_antisaccade)), na.rm = TRUE)
df_final$zscore_WM <- rowMeans(subset(df_final, select = c(zscore_keeptrack, zscore_lettermemory, zscore_dualnback)), na.rm = TRUE)
df_final$zscore_shifting <- rowMeans(subset(df_final, select = c(zscore_numberletter, zscore_categoryswitch, zscore_colorshape)), na.rm = TRUE)
df_final$zscore_EF <-rowMeans(subset(df_final, select = c(
zscore_stroop,
zscore_stopsignal,
zscore_antisaccade,
zscore_keeptrack,
zscore_lettermemory,
zscore_dualnback,
zscore_numberletter,
zscore_categoryswitch,
zscore_colorshape))
, na.rm = TRUE)
ggdensity(df_final$zscore_EF,
main = "Density plot of Executive Function z-score",
xlab = "Executive Function z-score",
add = "mean", rug = TRUE,
color = "grey4", fill = "grey")
View(df_final)
########## Global EFs score
# Occurence Microstate 1
a <- ggplot(df_final, aes(x=zscore_EF, y=occurence1))+
geom_point()+stat_cor()+
ylab("Occurence")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate A") +
theme(plot.title = element_text(hjust = 0.1))
# Occurence Microstate 2
b <- ggplot(df_final, aes(x=zscore_EF, y=occurence2))+
geom_point()+stat_cor()+
ylab("Occurence")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate B") +
theme(plot.title = element_text(hjust = 0.1))
# Occurence Microstate 3
c <- ggplot(df_final, aes(x=zscore_EF, y=occurence3))+
geom_point()+stat_cor()+
ylab("Occurence")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate C") +
theme(plot.title = element_text(hjust = 0.1))
# Occurence Microstate 4
d <- ggplot(df_final, aes(x=zscore_EF, y=occurence4))+
geom_point()+stat_cor()+
ylab("Occurence")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate D") +
theme(plot.title = element_text(hjust = 0.1))
# meanduration Microstate 1
e <- ggplot(df_final, aes(x=zscore_EF, y=duration1))+
geom_point()+stat_cor()+
ylab("Mean Duration")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate A") +
theme(plot.title = element_text(hjust = 0.1))
# meanduration Microstate 2
f <- ggplot(df_final, aes(x=zscore_EF, y=duration2))+
geom_point()+stat_cor()+
ylab("Mean Duration")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate B") +
theme(plot.title = element_text(hjust = 0.1))
# meanduration Microstate 3
g <- ggplot(df_final, aes(x=zscore_EF, y=duration3))+
geom_point()+stat_cor()+
ylab("Mean Duration")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate C") +
theme(plot.title = element_text(hjust = 0.1))
# meanduration Microstate 4
h <- ggplot(df_final, aes(x=zscore_EF, y=duration4))+
geom_point()+stat_cor()+
ylab("Mean Duration")+
xlab("Executive Functions")+
geom_smooth(method=lm , color="black", fill="lightgray", se=TRUE) +
theme_bw()+
ggtitle("Microstate D") +
theme(plot.title = element_text(hjust = 0.1))
# Grid
plot_grid(c,d,g,h, ncol = 2, nrow = 2) # Hypotheses
plot_grid(a,b,c,d,e,f,g,h, ncol = 4, nrow = 2)
plot_grid(c,d,g,h, ncol = 2, nrow = 2) # Hypotheses
library(pwr)
# Define your parameters
f <- as.numeric(cohen.d(.3))  # Effect size as Cohen's f
# Define your parameters
f <- as.numeric(cohen.d(.3))  # Effect size as Cohen's f
# Define your parameters
f <- .3  # Effect size as Cohen's f
pwr <- 0.80  # Desired power
sig.level <- 0.05  # Type I error rate
n.conditions <- 4  # Number of conditions
n.measures <- 6  # Number of measures
# Calculate sample size for within-subjects design
pwr.anova.test(k = n.conditions,
f = f,
sig.level = sig.level,
power = pwr,
type = "within")
library(effsize)
install.packages('effsize')
library(effsize)
# Define your parameters
f <- as.numeric(cohen.d(.3))  # Effect size as Cohen's f
# Define your parameters
d <- .3  # Effect size as Cohen's d
k <- 4  # Number of conditions
f <- sqrt((d^2) / (4*(k-1)))  # Convert to Cohen's f
pwr <- 0.80  # Desired power
sig.level <- 0.05  # Type I error rate
# Calculate sample size for within-subjects design
pwr.anova.test(k = k,
f = f,
sig.level = sig.level,
power = pwr,
type = "within")
# Install and load the simr package
if (!require(simr)) {
install.packages("simr")
library(simr)
}
# Define your parameters
effectSize <- .3
n.conditions <- 4
# Build a basic model
# Note: This will vary based on your exact experiment and the details of your data!
model <- makeLmer(y ~ (1|id) + condition, fixef = c(0, rep(effectSize, n.conditions-1)),
VarCorr = c(id = 1, Residual = 1), n = 50)
help(pwr.anova.test)
pwr.anova.test(f=0.28,k=4,n=20,sig.level=0.05)
pwr.anova.test(f=0.3,k=1,n=4,sig.level=0.05)
# Set the parameters for the power analysis
k <- 4       # Number of conditions
m <- 6       # Number of measures
f <- 0.3     # Desired effect size
# Calculate the required sample size or power
result <- pwr.rm.anova.test(k = k, m = m, f = f)
library(pwr)
help(pwr.rm.anova.test)
help(wp.rmanova)
library(WebPower)
wp.rmanova(n = NULL, ng = NULL, nm = NULL, f = NULL, nscor = 1,
alpha = 0.05, power = NULL, type = 0)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 2)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 0)
wp.rmanova(ng = 4, nm = 6, f = .5, nscor = 1,
alpha = 0.05, power = .8, type = 0)
wp.rmanova(ng = 1, nm = 6, f = .5, nscor = 1,
alpha = 0.05, power = .8, type = 0)
wp.rmanova(ng = 4, nm = 2, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 0)
wp.rmanova(ng = 4, nm = 1, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 0)
wp.rmanova(ng = 4, nm = 4, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 0)
wp.rmanova(ng = 4, nm = 12, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 0)
wp.rmanova(ng = 4, nm = 12, f = .3, nscor = 1,
alpha = 0.05, power = .6, type = 0)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = .5,
alpha = 0.05, power = .6, type = 2)
wp.rmanova(ng = 4, nm = 6, f = .3, alpha = 0.05, power = .8)
wp.rmanova(ng = 4, nm = 6, f = .3, alpha = 0.05, power = .8)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = .5,
alpha = 0.05, power = .6, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = .5,
alpha = 0.05, power = .6, type = 2)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = .5,
alpha = 0.05, power = .6, type = 0)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = .5,
alpha = 0.05, power = .6, type = 2)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = .5,
alpha = 0.05, power = .6, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .5, nscor = .5,
alpha = 0.05, power = .6, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .5, nscor = .5,
alpha = 0.05, power = .6, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .5, nscor = .5,
alpha = 0.05, power = .6, type = 1)
wp.rmanova(ng = 2, nm = 6, f = .3, nscor = .5,
alpha = 0.05, power = .6, type = 2)
wp.rmanova(ng = 4, nm = 3, f = .3, nscor = .5,
alpha = 0.05, power = .6, type = 2)
wp.rmanova(ng = 4, nm = 3, f = .3, nscor = .5,
alpha = 0.05, power = .8, type = 2)
wp.rmanova(ng = 4, nm = 3, f = .3, nscor = .5,
alpha = 0.05, power = .8, type = 2)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = .5,
alpha = 0.05, power = .8, type = 2)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 2)
wp.rmanova(ng = 4, nm = 6, f = .3, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .25, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .35, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .40, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .50, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .30, nscor = 0.2,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .30, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 2, nm = 2, f = .30, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 2, nm = 2, f = .30, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 1, nm = 6, f = .30, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 4, nm = 6, f = .30, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 2, nm = 6, f = .30, nscor = 1,
alpha = 0.05, power = .8, type = 1)
wp.rmanova(ng = 16, nm = 6, f = .30, nscor = 1,
alpha = 0.05, power = .8, type = 1)
help(pwr.f2.test)
To calculate the required sample size for your experimental plan in R, specifically for a within-subject design with 4 conditions and 6 measures, detecting an effect size of 0.3, achieving a power of 0.8, and using an alpha level of 0.05, you can use the pwr package.
library(pwr)
# Set the parameters for the power analysis
k <- 4      # Number of conditions
m <- 6      # Number of measures
f <- 0.3    # Effect size (Cohen's f)
alpha <- 0.05  # Significance level
power <- 0.8   # Desired power
# Calculate the required sample size or power
result <- pwr.f2.test(u = m, v = k - 1, f2 = f^2, sig.level = alpha, power = power)
pwr.f2.test(u=5,v=89,f2=0.1/(1-0.1),sig.level=0.05)
pwr.f2.test(u=6,v=4,f2=0.3,sig.level=0.05)
pwr.f2.test(u=6,v=4,f2=0.3,power=.8,sig.level=0.05)
pwr.f2.test(u=6,v=4,f2=0.3,sig.level=0.05,power=.8)
pwr.f2.test(u=6,v=4,f2=0.3,sig.level=0.05,power=.8)
library(shiny); runApp('C:/Users/q.chenot/Desktop/test_simu.R')
flight_data <- read.csv('D:\\Google Drive\\Professionnel\\3_Post-doc_ISAE\\PowerBrain\\data_tmp\\simu\\sub-P001\\ses-3\\sub-P001_ses-3-baseline_sc1-VFR-low.csv')
flight_data <- read.csv('D:\\Google Drive\\Professionnel\\3_Post-doc_ISAE\\PowerBrain\\data_tmp\\simu\\sub-P001\\ses-3\\sub-P001_ses-3-baseline_sc1-VFR-low.csv')
View(flight_data)
# Load the flight simulator data
flight_data <- read_csv('D:/Google Drive/Professionnel/3_Post-doc_ISAE/PowerBrain/data_tmp/simu/sub-P001/ses-3/sub-P001_ses-3-baseline_sc1-VFR-low.csv', col_names = FALSE)
# Load necessary packages
library(shiny)
library(plotly)# Load necessary package
library(tidyverse)
# Load the flight simulator data
flight_data <- read_csv('D:/Google Drive/Professionnel/3_Post-doc_ISAE/PowerBrain/data_tmp/simu/sub-P001/ses-3/sub-P001_ses-3-baseline_sc1-VFR-low.csv', col_names = FALSE)
# Rename the columns
colnames(flight_data) <- c('Timestamp', 'Latitude', 'Longitude', 'Altitude', 'Speed', 'Cap', 'G_Pull', 'Sounds', 'Joystick_Pressure')
View(flight_data)
runApp('C:/Users/q.chenot/Desktop/test_simu.R')
str(flight_data)
# Install necessary packages
install.packages(c("plotly", "crosstalk"))
# Load necessary packages
library(plotly)
library(crosstalk)
# Shared data frame
shared_flight_data <- SharedData$new(flight_data)
# Flight path plot
flight_path_plot <- plot_ly(shared_flight_data, x = ~Longitude, y = ~Latitude, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "Flight Path", xaxis = list(title = "Longitude"), yaxis = list(title = "Latitude"))
# Altitude plot
altitude_plot <- plot_ly(shared_flight_data, x = ~Timestamp, y = ~Altitude, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "Altitude", xaxis = list(title = "Time (s)"), yaxis = list(title = "Altitude (m)"))
# Speed plot
speed_plot <- plot_ly(shared_flight_data, x = ~Timestamp, y = ~Speed, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "Speed", xaxis = list(title = "Time (s)"), yaxis = list(title = "Speed (m/s)"))
# G's plot
gs_plot <- plot_ly(shared_flight_data, x = ~Timestamp, y = ~G_Pull, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "G's", xaxis = list(title = "Time (s)"), yaxis = list(title = "G's"))
# Create subplot
subplot(flight_path_plot, altitude_plot, speed_plot, gs_plot, nrows = 4, shareX = TRUE)
install.packages(c("plotly", "crosstalk"))
plot_ly(shared_flight_data, x = ~Longitude, y = ~Latitude, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "Flight Path", xaxis = list(title = "Longitude"), yaxis = list(title = "Latitude"))
# Flight path plot
flight_path_plot <- plot_ly(shared_flight_data, x = ~Longitude, y = ~Latitude, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "Flight Path", xaxis = list(title = "Longitude"), yaxis = list(title = "Latitude"))
# Altitude plot
altitude_plot <- plot_ly(shared_flight_data, x = ~Timestamp, y = ~Altitude, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "Altitude", xaxis = list(title = "Time (s)"), yaxis = list(title = "Altitude (m)"))
# Speed plot
speed_plot <- plot_ly(shared_flight_data, x = ~Timestamp, y = ~Speed, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "Speed", xaxis = list(title = "Time (s)"), yaxis = list(title = "Speed (m/s)"))
# G's plot
gs_plot <- plot_ly(shared_flight_data, x = ~Timestamp, y = ~G_Pull, type = "scatter", mode = "lines", color = ~Timestamp) %>%
layout(title = "G's", xaxis = list(title = "Time (s)"), yaxis = list(title = "G's"))
subplot(flight_path_plot, altitude_plot, speed_plot, gs_plot, nrows = 4, shareX = TRUE)
View(flight_path_plot)
View(flight_data)
runApp('C:/Users/q.chenot/Desktop/test_simu.R')
runApp('C:/Users/q.chenot/Desktop/test_simu.R')
## LOAD LIBRARIES
# Function to check if each required package is installed, and install it if not
required_packages <- c("hms", "tidyverse") # List of packages required for this script
install_if_not_present <- function(package) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
}
}
lapply(required_packages, install_if_not_present) # Apply the function to each required package
# Load the libraries
library(hms)
library(tidyverse)
## PATH MANAGEMENT
# Get the directory and path to this file
this_file <- rstudioapi::getSourceEditorContext()$path  # if using RStudio
this_dir <- dirname(this_file)
setwd(this_dir)
project_dir <- dirname(dirname(dirname(this_dir))) # Get the project directory
data_path <- file.path(project_dir, "data") # Define the relative path to the input data
results_path <- file.path(project_dir, "derived_data") # Define the relative path to the output data
results_path <- file.path(project_dir, "derived_data") # Define the relative path to the output data
# Create the result directory.
dir.create(results_path, recursive = TRUE, showWarnings = FALSE)
source("antisaccade.R")
process_antisaccade(data_path, results_path)
data_path
