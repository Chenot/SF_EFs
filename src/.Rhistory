x = "Factor",
y = "Factor"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
axis.text.y = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold")
)
# Display the heatmap
print(correlation_heatmap)
## CAREFUL OF REVERSE ITEM !!!
# Load required packages
library(tidyverse)
library(ggpubr)
# Define the folder containing the files
folder_path <- "D:/Google Drive/Professionnel/3_Post-doc_ISAE/RR_MicroStates/tmp_results/behavioral/ArSQ"
# List all ARSQ files in the folder
files <- list.files(folder_path, pattern = "_ArsQuestionnaire\\.txt$", full.names = TRUE)
# Define translation and factor mapping in a single step
translation_and_factors <- tribble(
~Question_French, ~Question_English, ~Factor,
"j'ai pensé à mes émotions.", "i thought about my feelings", "Self",
"je me suis senti.e agité.e.", "i felt restless", "Discontinuity of Mind",
"je me suis senti.e fatigué.e.", "i felt tired", "Sleepiness",
"je me suis senti.e endormi.e.", "i felt sleepy", "Sleepiness",
"je me suis senti.e à l'aise.", "i felt comfortable", "Comfort",
"je me suis senti.e détendu.e.", "i felt relaxed", "Comfort",
"je me suis senti.e heureux.se.", "i felt happy", "Comfort",
"j'ai apprecié la session.", "i enjoyed the session", "NA",
"je me suis ennuyé.e.", "i felt bored", "NA",
"je n'ai rien senti.e.", "i felt nothing", "NA",
"j'ai ressenti.e la même chose tout au long de la session.", "I felt the same throughout the session", "NA",
"j'ai pensé à ma santé.", "i thought about my health", "Health Concern",
"j'ai pensé à mon travail / mes études.", "i thought about my work / study", "Planning",
"j'ai pensé à mon comportement.", "i thought about my behavior", "Self",
"j'ai eu des pensées que je n'aurais pas volontiers partagé avec d'autres.", "I had thoughts that I would not readily share with others", "NA",
"j'étais occupé à penser.", "i had busy thoughts", "Discontinuity of Mind",
"j'avais des pensées similaires tout au long de la session.", "i had similar thoughts throughout the session", "NA",
"j'ai pensé aux autres.", "i thought about others", "Theory of Mind",
"j'ai pensé à moi-même.", "i thought about myself", "Self",
"j'ai pensé à des choses agréables.", "i thought about pleasant things", "NA",
"j'ai pensé à résoudre des problèmes.", "i thought about solving problems", "Planning",
"j'ai pensé au but de l'expérience.", "i thought about the aim of the experiment", "NA",
"j'ai eu du mal à rester éveillé.e.", "i had difficulty staying awake", "Sleepiness",
"j'ai eu des pensées qui changaient rapidement.", "i had rapidly switching thoughts", "Discontinuity of Mind",
"j'ai eu des pensées superficielles.", "i had superficial thoughts", "NA",
"j'ai pensé au passé.", "i thought about the past", "Planning",
"j'ai pensé au présent.", "i thought about the present", "NA",
"j'ai pensé au futur.", "i thought about the future", "Planning",
"j'ai eu des pensées profondes.", "i had deep thoughts", "Planning",
"je ne pensais à rien.", "i thought about nothing", "NA",
"j'ai eu des difficultés à retenir mes pensées.", "I had difficulty holding on to my thoughts", "Discontinuity of Mind",
"j'ai pensé aux personnes que j'aime bien.", "i thought about people i like", "Theory of Mind",
"j'ai pensé en images.", "i thought in images", "Visual Thought",
"j'ai pensé en mots.", "i thought in words", "Verbal Thought",
"j'ai pensé aux choses que je dois faire.", "i thought about things i need to do", "Planning",
"j'étais conscient de mon corps.", "i was conscious of my body", "Somatic Awareness",
"j'ai pensé aux sons qui m'entourent.", "i thought about the sounds around me", "NA",
"j'ai pensé aux odeurs autour de moi.", "i thought about the smells around me", "NA",
"j'ai pensé aux bâtements de mon coeur.", "i thought about my heartbeat", "Somatic Awareness",
"j'ai pensé à ma respiration.", "i thought about my breathing", "Somatic Awareness",
"je me suis mis à la place des autres.", "i placed myself in other peoples' shoes", "Theory of Mind",
"j'ai eu des émotions négatives.", "i had negative feelings", "NA",
"je contrôlais mes pensées.", "I had my thoughts under control", "Discontinuity of Mind",
"je me suis senti.e mal.", "i felt ill", "Health Concern",
"j'ai ressenti de la douleur.", "i felt pain", "Health Concern",
"je me suis senti motivé pour participer.", "i felt motivated to participate", "NA",
"j'ai des difficultés à me souvenir de mes pensées.", "i had difficulty remembering my thoughts", "NA",
"j'ai des difficultés à me souvenir de mes sentiments.", "i had difficulty remembering my feelings", "NA",
"j'avais les yeux fermés.", "i had my eyes closed", "NA",
"j'ai pu répondre correctement aux affirmations précédentes.", "i was able to answer the previous statements correctly", "NA"
)
# Function to normalize text
normalize_text <- function(text) {
text %>%
str_squish() %>%          # Remove extra spaces
tolower() %>%             # Convert to lowercase
str_replace_all("[[:punct:]]", "") # Remove punctuation
}
# Initialize an empty list to store the data
data_list <- list()
# Loop through each file
for (file in files) {
# Extract participant ID from the filename (e.g., P156)
participant_id <- str_extract(basename(file), "P\\d+")
# Read the file
df <- read_delim(file, delim = ";", col_names = c("Question_French", participant_id), skip = 1, col_types = cols(.default = "c"))
# Normalize the questions in the file
df <- df %>%
mutate(Question_French = normalize_text(Question_French))
# Store the dataframe in the list
data_list[[participant_id]] <- df
}
# Normalize the translation and factor mapping
translation_and_factors <- translation_and_factors %>%
mutate(Question_French = normalize_text(Question_French))
# Merge all dataframes
merged_data <- data_list %>%
reduce(full_join, by = "Question_French")
# Add translation and factor columns using `merge()`
merged_data <- merge(translation_and_factors, merged_data, by = "Question_French", all.y = TRUE)
# Add Item column and reorder
merged_data <- merged_data %>%
mutate(Item = row_number()) %>%
select(Item, Question_French, Question_English, Factor, everything())
#Shwo data
str(merged_data)
############
#Statistics #
############
# Convert the data from wide to long format for easier aggregation
response_data <- merged_data %>%
select(Factor, Question_English, starts_with("P")) %>% # Include Item column
pivot_longer(cols = -c(Factor, Question_English), names_to = "Participant", values_to = "Response") %>%
mutate(Response = as.numeric(Response)) # Convert responses to numeric for aggregation
# Generate the table with percentages (rounded without decimals)
likert_summary <- response_data %>%
group_by(Factor, Question_English) %>%
summarise(
n = sum(!is.na(Response)), # Total number of responses (non-NA)
`-2` = round(sum(Response == -2, na.rm = TRUE) / n * 100),
`-1` = round(sum(Response == -1, na.rm = TRUE) / n * 100),
`0` = round(sum(Response == 0, na.rm = TRUE) / n * 100),
`+1` = round(sum(Response == 1, na.rm = TRUE) / n * 100),
`+2` = round(sum(Response == 2, na.rm = TRUE) / n * 100)
) %>%
arrange(Factor) # Sort by Factor for consistent order
# Show percentage per Factor
print(likert_summary)
#Compute mean of factors
# Step 1: Convert wide format to long format for easier calculations
long_data <- merged_data %>%
pivot_longer(cols = starts_with("P"), names_to = "Participant", values_to = "Response") %>%
filter(!is.na(Factor) & Factor != "NA") %>% # Exclude rows with NA or undefined factors
mutate(Response = as.numeric(Response))    # Convert responses to numeric
# Step 2: Compute the mean for each factor for each participant
factor_means <- long_data %>%
group_by(Participant, Factor) %>%
summarise(Mean = mean(Response, na.rm = TRUE), .groups = "drop") %>% # Calculate the mean for each factor
pivot_wider(names_from = Factor, values_from = Mean, values_fill = NA) # Reshape into wide format
# Show factor means
print(factor_means)
# Step 1: Convert wide format to long format for visualization
long_means <- factor_means %>%
pivot_longer(cols = -Participant, names_to = "Factor", values_to = "Mean") %>%
drop_na() # Remove any NA values
# Step 2: Create a combined histogram and density plot
combined_plot <- ggplot(long_means, aes(x = Mean, fill = Factor, color = Factor)) +
# Add histogram for each factor
geom_histogram(
aes(y = ..density..),
binwidth = 0.5,
alpha = 0.3,
position = "identity"
) +
# Add density plot for each factor
geom_density(alpha = 0.5) +
facet_wrap(~ Factor, scales = "free") + # One subplot for each factor
labs(
title = "Histogram and Density Plot of Mean Values for Each Factor",
x = "Mean Value",
y = "Density"
) +
theme_minimal() + # Use a clean base theme
theme(
legend.position = "none", # Remove legend
strip.text = element_text(size = 10, face = "bold") # Style facet labels
)
# Display the combined plot
print(combined_plot)
# Step 1: Select only the factor columns (excluding Participant column)
factor_data <- factor_means %>%
select(-Participant) %>% # Remove the Participant column
drop_na() # Remove any rows with NA values
# Step 2: Compute the correlation matrix
correlation_matrix <- cor(factor_data, use = "pairwise.complete.obs") # Pairwise correlation for missing data
# Step 3: Convert the correlation matrix to a tidy format for visualization
correlation_tidy <- as.data.frame(as.table(correlation_matrix)) %>%
rename(Factor1 = Var1, Factor2 = Var2, Correlation = Freq)
# Step 4: Create a heatmap of the correlation matrix
correlation_heatmap <- ggplot(correlation_tidy, aes(x = Factor1, y = Factor2, fill = Correlation)) +
geom_tile(color = "white") + # Heatmap tiles with white borders
scale_fill_gradient2(
low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Correlation"
) +
labs(
title = "Correlation Matrix of Factors",
x = "Factor",
y = "Factor"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
axis.text.y = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold")
)
# Display the heatmap
print(correlation_heatmap)
## CAREFUL OF REVERSE ITEM !!!
# Load required packages
library(tidyverse)
library(ggpubr)
# Define the folder containing the files
folder_path <- "D:/Google Drive/Professionnel/3_Post-doc_ISAE/RR_MicroStates/tmp_results/behavioral/ArSQ"
# List all ARSQ files in the folder
files <- list.files(folder_path, pattern = "_ArsQuestionnaire\\.txt$", full.names = TRUE)
# Define translation and factor mapping in a single step
translation_and_factors <- tribble(
~Question_French, ~Question_English, ~Factor,
"j'ai pensé à mes émotions.", "i thought about my feelings", "Self",
"je me suis senti.e agité.e.", "i felt restless", "Discontinuity of Mind",
"je me suis senti.e fatigué.e.", "i felt tired", "Sleepiness",
"je me suis senti.e endormi.e.", "i felt sleepy", "Sleepiness",
"je me suis senti.e à l'aise.", "i felt comfortable", "Comfort",
"je me suis senti.e détendu.e.", "i felt relaxed", "Comfort",
"je me suis senti.e heureux.se.", "i felt happy", "Comfort",
"j'ai apprecié la session.", "i enjoyed the session", "NA",
"je me suis ennuyé.e.", "i felt bored", "NA",
"je n'ai rien senti.e.", "i felt nothing", "NA",
"j'ai ressenti.e la même chose tout au long de la session.", "I felt the same throughout the session", "NA",
"j'ai pensé à ma santé.", "i thought about my health", "Health Concern",
"j'ai pensé à mon travail / mes études.", "i thought about my work / study", "Planning",
"j'ai pensé à mon comportement.", "i thought about my behavior", "Self",
"j'ai eu des pensées que je n'aurais pas volontiers partagé avec d'autres.", "I had thoughts that I would not readily share with others", "NA",
"j'étais occupé à penser.", "i had busy thoughts", "Discontinuity of Mind",
"j'avais des pensées similaires tout au long de la session.", "i had similar thoughts throughout the session", "NA",
"j'ai pensé aux autres.", "i thought about others", "Theory of Mind",
"j'ai pensé à moi-même.", "i thought about myself", "Self",
"j'ai pensé à des choses agréables.", "i thought about pleasant things", "NA",
"j'ai pensé à résoudre des problèmes.", "i thought about solving problems", "Planning",
"j'ai pensé au but de l'expérience.", "i thought about the aim of the experiment", "NA",
"j'ai eu du mal à rester éveillé.e.", "i had difficulty staying awake", "Sleepiness",
"j'ai eu des pensées qui changaient rapidement.", "i had rapidly switching thoughts", "Discontinuity of Mind",
"j'ai eu des pensées superficielles.", "i had superficial thoughts", "NA",
"j'ai pensé au passé.", "i thought about the past", "Planning",
"j'ai pensé au présent.", "i thought about the present", "NA",
"j'ai pensé au futur.", "i thought about the future", "Planning",
"j'ai eu des pensées profondes.", "i had deep thoughts", "Planning",
"je ne pensais à rien.", "i thought about nothing", "NA",
"j'ai eu des difficultés à retenir mes pensées.", "I had difficulty holding on to my thoughts", "Discontinuity of Mind",
"j'ai pensé aux personnes que j'aime bien.", "i thought about people i like", "Theory of Mind",
"j'ai pensé en images.", "i thought in images", "Visual Thought",
"j'ai pensé en mots.", "i thought in words", "Verbal Thought",
"j'ai pensé aux choses que je dois faire.", "i thought about things i need to do", "Planning",
"j'étais conscient de mon corps.", "i was conscious of my body", "Somatic Awareness",
"j'ai pensé aux sons qui m'entourent.", "i thought about the sounds around me", "NA",
"j'ai pensé aux odeurs autour de moi.", "i thought about the smells around me", "NA",
"j'ai pensé aux bâtements de mon coeur.", "i thought about my heartbeat", "Somatic Awareness",
"j'ai pensé à ma respiration.", "i thought about my breathing", "Somatic Awareness",
"je me suis mis à la place des autres.", "i placed myself in other peoples' shoes", "Theory of Mind",
"j'ai eu des émotions négatives.", "i had negative feelings", "NA",
"je contrôlais mes pensées.", "I had my thoughts under control", "Discontinuity of Mind",
"je me suis senti.e mal.", "i felt ill", "Health Concern",
"j'ai ressenti de la douleur.", "i felt pain", "Health Concern",
"je me suis senti motivé pour participer.", "i felt motivated to participate", "NA",
"j'ai des difficultés à me souvenir de mes pensées.", "i had difficulty remembering my thoughts", "NA",
"j'ai des difficultés à me souvenir de mes sentiments.", "i had difficulty remembering my feelings", "NA",
"j'avais les yeux fermés.", "i had my eyes closed", "NA",
"j'ai pu répondre correctement aux affirmations précédentes.", "i was able to answer the previous statements correctly", "NA"
)
# Function to normalize text
normalize_text <- function(text) {
text %>%
str_squish() %>%          # Remove extra spaces
tolower() %>%             # Convert to lowercase
str_replace_all("[[:punct:]]", "") # Remove punctuation
}
# Initialize an empty list to store the data
data_list <- list()
# Loop through each file
for (file in files) {
# Extract participant ID from the filename (e.g., P156)
participant_id <- str_extract(basename(file), "P\\d+")
# Read the file
df <- read_delim(file, delim = ";", col_names = c("Question_French", participant_id), skip = 1, col_types = cols(.default = "c"))
# Normalize the questions in the file
df <- df %>%
mutate(Question_French = normalize_text(Question_French))
# Store the dataframe in the list
data_list[[participant_id]] <- df
}
# Normalize the translation and factor mapping
translation_and_factors <- translation_and_factors %>%
mutate(Question_French = normalize_text(Question_French))
# Merge all dataframes
merged_data <- data_list %>%
reduce(full_join, by = "Question_French")
# Add translation and factor columns using `merge()`
merged_data <- merge(translation_and_factors, merged_data, by = "Question_French", all.y = TRUE)
# Add Item column and reorder
merged_data <- merged_data %>%
mutate(Item = row_number()) %>%
select(Item, Question_French, Question_English, Factor, everything())
#Shwo data
str(merged_data)
############
#Statistics #
############
# Convert the data from wide to long format for easier aggregation
response_data <- merged_data %>%
select(Factor, Question_English, starts_with("P")) %>% # Include Item column
pivot_longer(cols = -c(Factor, Question_English), names_to = "Participant", values_to = "Response") %>%
mutate(Response = as.numeric(Response)) # Convert responses to numeric for aggregation
# Generate the table with percentages (rounded without decimals)
likert_summary <- response_data %>%
group_by(Factor, Question_English) %>%
summarise(
n = sum(!is.na(Response)), # Total number of responses (non-NA)
`-2` = round(sum(Response == -2, na.rm = TRUE) / n * 100),
`-1` = round(sum(Response == -1, na.rm = TRUE) / n * 100),
`0` = round(sum(Response == 0, na.rm = TRUE) / n * 100),
`+1` = round(sum(Response == 1, na.rm = TRUE) / n * 100),
`+2` = round(sum(Response == 2, na.rm = TRUE) / n * 100)
) %>%
arrange(Factor) # Sort by Factor for consistent order
# Show percentage per Factor
print(likert_summary)
#Compute mean of factors
# Step 1: Convert wide format to long format for easier calculations
long_data <- merged_data %>%
pivot_longer(cols = starts_with("P"), names_to = "Participant", values_to = "Response") %>%
filter(!is.na(Factor) & Factor != "NA") %>% # Exclude rows with NA or undefined factors
mutate(Response = as.numeric(Response))    # Convert responses to numeric
# Step 2: Compute the mean for each factor for each participant
factor_means <- long_data %>%
group_by(Participant, Factor) %>%
summarise(Mean = mean(Response, na.rm = TRUE), .groups = "drop") %>% # Calculate the mean for each factor
pivot_wider(names_from = Factor, values_from = Mean, values_fill = NA) # Reshape into wide format
# Show factor means
print(factor_means)
# Step 1: Convert wide format to long format for visualization
long_means <- factor_means %>%
pivot_longer(cols = -Participant, names_to = "Factor", values_to = "Mean") %>%
drop_na() # Remove any NA values
# Step 2: Create a combined histogram and density plot
combined_plot <- ggplot(long_means, aes(x = Mean, fill = Factor, color = Factor)) +
# Add histogram for each factor
geom_histogram(
aes(y = ..density..),
binwidth = 0.5,
alpha = 0.3,
position = "identity"
) +
# Add density plot for each factor
geom_density(alpha = 0.5) +
facet_wrap(~ Factor, scales = "free") + # One subplot for each factor
labs(
title = "Histogram and Density Plot of Mean Values for Each Factor",
x = "Mean Value",
y = "Density"
) +
theme_minimal() + # Use a clean base theme
theme(
legend.position = "none", # Remove legend
strip.text = element_text(size = 10, face = "bold") # Style facet labels
)
# Display the combined plot
print(combined_plot)
# Step 1: Select only the factor columns (excluding Participant column)
factor_data <- factor_means %>%
select(-Participant) %>% # Remove the Participant column
drop_na() # Remove any rows with NA values
# Step 2: Compute the correlation matrix
correlation_matrix <- cor(factor_data, use = "pairwise.complete.obs") # Pairwise correlation for missing data
# Step 3: Convert the correlation matrix to a tidy format for visualization
correlation_tidy <- as.data.frame(as.table(correlation_matrix)) %>%
rename(Factor1 = Var1, Factor2 = Var2, Correlation = Freq)
# Step 4: Create a heatmap of the correlation matrix
correlation_heatmap <- ggplot(correlation_tidy, aes(x = Factor1, y = Factor2, fill = Correlation)) +
geom_tile(color = "white") + # Heatmap tiles with white borders
scale_fill_gradient2(
low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Correlation"
) +
labs(
title = "Correlation Matrix of Factors",
x = "Factor",
y = "Factor"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
axis.text.y = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold")
)
# Display the heatmap
print(correlation_heatmap)
View(merged_data)
library(tidyverse)
library(ggplot2)
library(patchwork)
# Read the CSV file and filter out aberrant values
df <- read.csv('E:\\OneDrive - ISAE-SUPAERO\\3_Post-doc_ISAE\\eeg_RS_SF\\tmp\\P06_microstates_stats\\all_participants_microstate_metrics.csv') %>%
filter(Mean_Duration_ms <= 200) %>%
filter(Occurrences_per_min <= 500)
# Convert Microstate to factor to ensure correct ordering
df$Microstate <- as.factor(df$Microstate)
# Create plot 1: Occurrences per minute
p1 <- ggplot(df, aes(x=Microstate, y=Occurrences_per_min, fill=Condition)) +
geom_boxplot() +
labs(title="Distribution of Occurrences per Minute by Microstate and Condition",
x="Microstate",
y="Occurrences per Minute") +
theme_bw() +
theme(plot.title = element_text(size=12))
# Create plot 2: Mean Duration
p2 <- ggplot(df, aes(x=Microstate, y=Mean_Duration_ms, fill=Condition)) +
geom_boxplot() +
labs(title="Distribution of Mean Duration by Microstate and Condition",
x="Microstate",
y="Mean Duration (ms)") +
theme_bw() +
theme(plot.title = element_text(size=12))
# Combine plots vertically
combined_plot <- p1 / p2
# Save the plot
ggsave("microstate_distributions_filtered.png",
combined_plot,
width = 12,
height = 10,
dpi = 300)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(ggrain)  # for raincloud plots
# Read the CSV file and filter out aberrant values
df <- read.csv('E:\\OneDrive - ISAE-SUPAERO\\3_Post-doc_ISAE\\eeg_RS_SF\\tmp\\P06_microstates_stats\\all_participants_microstate_metrics.csv') %>%
filter(Mean_Duration_ms <= 200) %>%
filter(Occurrences_per_min <= 500)
# Convert Microstate to factor
df$Microstate <- as.factor(df$Microstate)
# Create plot 1: Occurrences per minute
p1 <- ggplot(df, aes(x = Microstate, y = Occurrences_per_min, fill = Condition, color = Condition)) +
geom_rain(rain.side = 'l', # left side
alpha = 0.5,
rain.width = 0.3,
box.width = 0.07) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
labs(title = "Distribution of Occurrences per Minute by Microstate and Condition",
x = "Microstate",
y = "Occurrences per Minute") +
theme_bw() +
theme(plot.title = element_text(size = 12))
# Create plot 2: Mean Duration
p2 <- ggplot(df, aes(x = Microstate, y = Mean_Duration_ms, fill = Condition, color = Condition)) +
geom_rain(rain.side = 'l', # left side
alpha = 0.5,
rain.width = 0.3,
box.width = 0.07) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
labs(title = "Distribution of Mean Duration by Microstate and Condition",
x = "Microstate",
y = "Mean Duration (ms)") +
theme_bw() +
theme(plot.title = element_text(size = 12))
# Combine plots vertically
combined_plot <- p1 / p2
# Save the plot
ggsave("microstate_distributions_raincloud.png",
combined_plot,
width = 12,
height = 10,
dpi = 300)
# Scripts/hypothesis1_scenario_workload.R
# Hypothesis 1: Scenario difficulty affects subjective and objective workload
################################################
######### 1) Prepare data for analyses #########
################################################
# Load data and utilities
source("data_loading.R")
# Scripts/hypothesis2_subjective_objective_workload.R
# Hypothesis 2: Relationship between subjective (NASA-TLX) and objective (Oddball) workload measures
#######################################################
############### 1) Prepare data for analyses ##########
#######################################################
# Load data and utilities
setwd(dirname(sys.frame(1)$ofile))
#####
# Define paths relative to src folder
root_dir <- dirname(getwd())  # Get parent of src folder
#### MAIN FILE FOR SPACE FORTRESS DATA EXTRACTION AND BASIC VISUALITION
# Get current script's directory and set working directory
current_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(current_dir)
# Source the Clean_SF.R file with full path to ensure it's found
source(file.path(current_dir, "Clean_SF.R"))
#librairies
library("stringr")
library("foreach")
library("bestNormalize")
library("SciViews")
library("ggplot2")
library("ggpubr")
library("dplyr")
library("broom")
#####
# Define paths relative to src folder
root_dir <- dirname(getwd())  # Get parent of src folder
data_path <- file.path(root_dir, "data")
output_path <- file.path(root_dir, "tmp_data")
b_Clean <- winDialog(type="yesno", "Are the raw files already cleaned?")
if(b_Clean=="NO") {
# Clean files
fil <- list_sf_files(data_path)
invisible(lapply(fil, write_file,
path=data_path,
path_clean=output_path))
}
